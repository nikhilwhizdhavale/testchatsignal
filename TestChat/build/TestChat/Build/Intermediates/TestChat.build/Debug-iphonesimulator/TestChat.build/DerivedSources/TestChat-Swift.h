// Generated by Apple Swift version 3.1 (swiftlang-802.0.51 clang-802.0.41)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Contacts;
@import Foundation;
@import CallKit;
@import WebRTC;
@import MessageUI;
@import UserNotifications;
#endif

#import "/Users/whizphone/Desktop/gitTestChat/TestChat/TestChat-Bridging-Header.h"

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class TSAccountManager;
@class TSNetworkManager;
@class AnyPromise;

/// Signal is actually two services - textSecure for messages and red phone (for calls).
/// AccountManager delegates to both.
SWIFT_CLASS("_TtC8TestChat14AccountManager")
@interface AccountManager : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) TSAccountManager * _Nonnull textSecureAccountManager;
@property (nonatomic, readonly, strong) TSNetworkManager * _Nonnull networkManager;
- (nonnull instancetype)initWithTextSecureAccountManager:(TSAccountManager * _Nonnull)textSecureAccountManager OBJC_DESIGNATED_INITIALIZER;
- (AnyPromise * _Nonnull)registerWithVerificationCode:(NSString * _Nonnull)verificationCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIWindow;
@class UIApplication;
@class NSPersistentContainer;

SWIFT_CLASS("_TtC8TestChat11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
@property (nonatomic, strong) NSPersistentContainer * _Nonnull persistentContainer;
- (void)saveContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SignalAttachment;
@class MPMoviePlayerController;
@class OWSAudioAttachmentPlayer;
@class UILabel;
@class UIButton;
@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC8TestChat32AttachmentApprovalViewController")
@interface AttachmentApprovalViewController : UIViewController <OWSAudioAttachmentPlayerDelegate>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) SignalAttachment * _Nonnull attachment;
@property (nonatomic, copy) void (^ _Nullable successCompletion)(void);
@property (nonatomic, strong) MPMoviePlayerController * _Nullable videoPlayer;
@property (nonatomic, strong) OWSAudioAttachmentPlayer * _Nullable audioPlayer;
@property (nonatomic, strong) UILabel * _Nullable audioStatusLabel;
@property (nonatomic, strong) UIButton * _Nullable audioPlayButton;
@property (nonatomic) BOOL isAudioPlayingFlag;
@property (nonatomic) BOOL isAudioPaused;
@property (nonatomic) CGFloat audioProgressSeconds;
@property (nonatomic) CGFloat audioDurationSeconds;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use attachment: constructor instead.");
- (nonnull instancetype)initWithAttachment:(SignalAttachment * _Nonnull)attachment successCompletion:(void (^ _Nonnull)(void))successCompletion OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)donePressedWithSender:(UIButton * _Nonnull)sender;
- (void)cancelPressedWithSender:(UIButton * _Nonnull)sender;
- (void)sendPressedWithSender:(UIButton * _Nonnull)sender;
- (void)audioPlayButtonPressedWithSender:(UIButton * _Nonnull)sender;
- (BOOL)isAudioPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)setIsAudioPlaying:(BOOL)isAudioPlaying;
- (BOOL)isPaused SWIFT_WARN_UNUSED_RESULT;
- (void)setIsPaused:(BOOL)isPaused;
- (void)setAudioProgress:(CGFloat)progress duration:(CGFloat)duration;
- (void)setAudioIconToPlay;
- (void)setAudioIconToPause;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class TSAttachmentPointer;
@class UIView;
@class AttachmentPointerView;
@class NSNotification;

/// Represents a download-in-progress
SWIFT_CLASS("_TtC8TestChat24AttachmentPointerAdapter")
@interface AttachmentPointerAdapter : JSQMediaItem <OWSMessageEditing>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly) BOOL isIncoming;
@property (nonatomic, readonly, strong) TSAttachmentPointer * _Nonnull attachmentPointer;
@property (nonatomic, strong) UIView * _Nullable cachedView;
@property (nonatomic, strong) AttachmentPointerView * _Nullable attachmentPointerView;
- (nonnull instancetype)initWithAttachmentPointer:(TSAttachmentPointer * _Nonnull)attachmentPointer isIncoming:(BOOL)isIncoming OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (BOOL)canPerformEditingAction:(SEL _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
- (void)performEditingAction:(SEL _Nonnull)action;
- (NSUInteger)mediaHash SWIFT_WARN_UNUSED_RESULT;
- (CGSize)mediaViewDisplaySize SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)mediaView SWIFT_WARN_UNUSED_RESULT;
- (void)attachmentDownloadProgress:(NSNotification * _Nonnull)notification;
- (null_unspecified instancetype)initWithMaskAsOutgoing:(BOOL)maskAsOutgoing SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class OWSProgressView;
@class UIColor;

SWIFT_CLASS("_TtC8TestChat21AttachmentPointerView")
@interface AttachmentPointerView : UIView
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) OWSProgressView * _Nonnull progressView;
@property (nonatomic, readonly, strong) UILabel * _Nonnull nameLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull statusLabel;
@property (nonatomic, readonly) BOOL isIncoming;
@property (nonatomic, readonly, copy) NSString * _Nonnull filename;
@property (nonatomic, readonly, strong) TSAttachmentPointer * _Nonnull attachmentPointer;
@property (nonatomic, readonly, copy) NSString * _Nonnull genericFilename;
@property (nonatomic) CGFloat progress;
- (nonnull instancetype)initWithAttachmentPointer:(TSAttachmentPointer * _Nonnull)attachmentPointer isIncoming:(BOOL)isIncoming OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)createSubviews;
- (NSString * _Nonnull)emojiForContentType:(NSString * _Nonnull)contentType SWIFT_WARN_UNUSED_RESULT;
- (void)updateViews;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColor;
@end


SWIFT_CLASS("_TtC8TestChat17AudioProgressView")
@interface AudioProgressView : UIView
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
@property (nonatomic, strong) UIColor * _Nonnull horizontalBarColor;
@property (nonatomic, strong) UIColor * _Nonnull progressColor;
@property (nonatomic) CGFloat progress;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use init() constructor instead.");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)updateSubviews;
- (void)updateContent;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIImage;

SWIFT_CLASS("_TtC8TestChat15AvatarImageView")
@interface AvatarImageView : UIImageView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (void)configureView;
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


@interface CNContact (SWIFT_EXTENSION(TestChat))
@end


@interface CNContact (SWIFT_EXTENSION(TestChat))
@end

@class SignalCall;
@class AVAudioPlayer;

SWIFT_CLASS("_TtC8TestChat16CallAudioService")
@interface CallAudioService : NSObject
- (nonnull instancetype)initWithHandleRinging:(BOOL)handleRinging OBJC_DESIGNATED_INITIALIZER;
- (void)muteDidChangeWithCall:(SignalCall * _Nonnull)call isMuted:(BOOL)isMuted;
- (void)speakerphoneDidChangeWithCall:(SignalCall * _Nonnull)call isEnabled:(BOOL)isEnabled;
- (void)hasLocalVideoDidChangeWithCall:(SignalCall * _Nonnull)call hasLocalVideo:(BOOL)hasLocalVideo;
- (void)didUpdateVideoTracksWithCall:(SignalCall * _Nullable)call;
- (void)handleStateWithCall:(SignalCall * _Nonnull)call;
@property (nonatomic, strong) AVAudioPlayer * _Nullable currentPlayer;
- (void)ringVibration;
- (void)vibrate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CXCallController;

/// Requests actions from CallKit
/// @Discussion:
/// Based on SpeakerboxCallManager, from the Apple CallKit Example app. Though, it’s responsibilities are mostly
/// mirrored (and delegated from) CallKitCallUIAdaptee.
/// TODO: Would it simplify things to merge this into CallKitCallUIAdaptee?
SWIFT_CLASS("_TtC8TestChat18CallKitCallManager")
@interface CallKitCallManager : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) CXCallController * _Nonnull callController;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAnonymousCallHandlePrefix;)
+ (NSString * _Nonnull)kAnonymousCallHandlePrefix SWIFT_WARN_UNUSED_RESULT;
- (void)startCall:(SignalCall * _Nonnull)call;
- (void)localHangupWithCall:(SignalCall * _Nonnull)call;
- (void)setHeldWithCall:(SignalCall * _Nonnull)call onHold:(BOOL)onHold;
- (void)setIsMutedWithCall:(SignalCall * _Nonnull)call isMuted:(BOOL)isMuted;
- (void)answerWithCall:(SignalCall * _Nonnull)call;
@property (nonatomic, readonly, copy) NSArray<SignalCall *> * _Nonnull calls;
- (SignalCall * _Nullable)callWithLocalId:(NSUUID * _Nonnull)localId SWIFT_WARN_UNUSED_RESULT;
- (void)addCall:(SignalCall * _Nonnull)call;
- (void)removeCall:(SignalCall * _Nonnull)call;
- (void)removeAllCalls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CallService;
@class OWSCallNotificationsAdapter;
@class CXProviderConfiguration;
@class CXProvider;
@class CXStartCallAction;
@class CXAnswerCallAction;
@class CXEndCallAction;
@class CXSetHeldCallAction;
@class CXSetMutedCallAction;
@class CXSetGroupCallAction;
@class CXPlayDTMFCallAction;
@class CXAction;
@class AVAudioSession;

/// Connects user interface to the CallService using CallKit.
/// User interface is routed to the CallManager which requests CXCallActions, and if the CXProvider accepts them,
/// their corresponding consequences are implmented in the CXProviderDelegate methods, e.g. using the CallService
SWIFT_CLASS("_TtC8TestChat20CallKitCallUIAdaptee")
@interface CallKitCallUIAdaptee : NSObject <CXProviderDelegate>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) CallService * _Nonnull callService;
@property (nonatomic, readonly, strong) OWSCallNotificationsAdapter * _Nonnull notificationsAdapter;
@property (nonatomic, readonly) BOOL hasManualRinger;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CXProviderConfiguration * _Nonnull providerConfiguration;)
+ (CXProviderConfiguration * _Nonnull)providerConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCallService:(CallService * _Nonnull)callService notificationsAdapter:(OWSCallNotificationsAdapter * _Nonnull)notificationsAdapter OBJC_DESIGNATED_INITIALIZER;
- (SignalCall * _Nonnull)startOutgoingCallWithHandle:(NSString * _Nonnull)handle SWIFT_WARN_UNUSED_RESULT;
- (void)reportIncomingCall:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
- (void)answerCallWithLocalId:(NSUUID * _Nonnull)localId;
- (void)answerCall:(SignalCall * _Nonnull)call;
- (void)declineCallWithLocalId:(NSUUID * _Nonnull)localId;
- (void)declineCall:(SignalCall * _Nonnull)call;
- (void)recipientAcceptedCall:(SignalCall * _Nonnull)call;
- (void)localHangupCall:(SignalCall * _Nonnull)call;
- (void)remoteDidHangupCall:(SignalCall * _Nonnull)call;
- (void)remoteBusy:(SignalCall * _Nonnull)call;
- (void)setIsMutedWithCall:(SignalCall * _Nonnull)call isMuted:(BOOL)isMuted;
- (void)setHasLocalVideoWithCall:(SignalCall * _Nonnull)call hasLocalVideo:(BOOL)hasLocalVideo;
- (void)providerDidReset:(CXProvider * _Nonnull)provider;
- (void)provider:(CXProvider * _Nonnull)provider performStartCallAction:(CXStartCallAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider performAnswerCallAction:(CXAnswerCallAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider performEndCallAction:(CXEndCallAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider performSetHeldCallAction:(CXSetHeldCallAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider performSetMutedCallAction:(CXSetMutedCallAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider performSetGroupCallAction:(CXSetGroupCallAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider performPlayDTMFCallAction:(CXPlayDTMFCallAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider timedOutPerformingAction:(CXAction * _Nonnull)action;
- (void)provider:(CXProvider * _Nonnull)provider didActivateAudioSession:(AVAudioSession * _Nonnull)audioSession;
- (void)provider:(CXProvider * _Nonnull)provider didDeactivateAudioSession:(AVAudioSession * _Nonnull)audioSession;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol OWSCallNotificationsAdaptee;

/// Present call related notifications to the user.
SWIFT_CLASS_NAMED("CallNotificationsAdapter")
@interface OWSCallNotificationsAdapter : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) id <OWSCallNotificationsAdaptee> _Nonnull adaptee;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)presentIncomingCall:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
- (void)presentMissedCall:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
- (void)presentMissedCallBecauseOfNoLongerVerifiedIdentityWithCall:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
- (void)presentMissedCallBecauseOfNewIdentityWithCall:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
@end

@class CallUIAdapter;
@class RTCIceServer;
@class PeerConnectionClient;
@class TSContactThread;
@class OWSCallIceUpdateMessage;
@class RTCVideoTrack;
@class OWSContactsManager;
@class OWSMessageSender;
@class RTCIceCandidate;
@class OWSWebRTCProtosData;

SWIFT_CLASS("_TtC8TestChat11CallService")
@interface CallService : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) OWSCallNotificationsAdapter * _Nonnull notificationsAdapter;
@property (nonatomic, strong) CallUIAdapter * _Null_unspecified callUIAdapter;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RTCIceServer * _Nonnull fallbackIceServer;)
+ (RTCIceServer * _Nonnull)fallbackIceServer SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) PeerConnectionClient * _Nullable peerConnectionClient;
@property (nonatomic, strong) TSContactThread * _Nullable thread;
@property (nonatomic, strong) SignalCall * _Nullable call;
/// In the process of establishing a connection between the clients (ICE process) we must exchange ICE updates.
/// Because this happens via Signal Service it’s possible the callee user has not accepted any change in the caller’s
/// identity. In which case <em>each</em> ICE update would cause an “identity change” warning on the callee’s device. Since
/// this could be several messages, the caller stores all ICE updates until receiving positive confirmation that the
/// callee has received a message from us. This positive confirmation comes in the form of the callees <code>CallAnswer</code>
/// message.
@property (nonatomic) BOOL sendIceUpdatesImmediately;
@property (nonatomic, copy) NSArray<OWSCallIceUpdateMessage *> * _Nonnull pendingIceUpdateMessages;
@property (nonatomic, copy) void (^ _Nullable fulfillCallConnectedPromise)(void);
@property (nonatomic, weak) RTCVideoTrack * _Nullable localVideoTrack;
@property (nonatomic, weak) RTCVideoTrack * _Nullable remoteVideoTrack;
@property (nonatomic) BOOL isRemoteVideoEnabled;
- (nonnull instancetype)initWithAccountManager:(AccountManager * _Nonnull)accountManager contactsManager:(OWSContactsManager * _Nonnull)contactsManager messageSender:(OWSMessageSender * _Nonnull)messageSender notificationsAdapter:(OWSCallNotificationsAdapter * _Nonnull)notificationsAdapter OBJC_DESIGNATED_INITIALIZER;
- (void)didEnterBackground;
- (void)didBecomeActive;
/// Choose whether to use CallKit or a Notification backed interface for calling.
- (void)createCallUIAdapter;
+ (NSString * _Nonnull)callServiceActiveCallNotificationName SWIFT_WARN_UNUSED_RESULT;
/// Called by the call initiator after receiving a CallAnswer from the callee.
- (void)handleReceivedAnswerWithThread:(TSContactThread * _Nonnull)thread callId:(uint64_t)callId sessionDescription:(NSString * _Nonnull)sessionDescription;
/// User didn’t answer incoming call
- (void)handleMissedCall:(SignalCall * _Nonnull)call thread:(TSContactThread * _Nonnull)thread;
/// The callee was already in another call.
- (void)handleRemoteBusyWithThread:(TSContactThread * _Nonnull)thread;
/// Received an incoming call offer. We still have to complete setting up the Signaling channel before we notify
/// the user of an incoming call.
- (void)handleReceivedOfferWithThread:(TSContactThread * _Nonnull)thread callId:(uint64_t)callId sessionDescription:(NSString * _Nonnull)callerSessionDescription;
/// Remote client (could be caller or callee) sent us a connectivity update
- (void)handleRemoteAddedIceCandidateWithThread:(TSContactThread * _Nonnull)thread callId:(uint64_t)callId sdp:(NSString * _Nonnull)sdp lineIndex:(int32_t)lineIndex mid:(NSString * _Nonnull)mid;
/// The remote client (caller or callee) ended the call.
- (void)handleRemoteHangupWithThread:(TSContactThread * _Nonnull)thread;
/// User chose to answer call referrred to by call <code>localId</code>. Used by the Callee only.
/// Used by notification actions which can’t serialize a call object.
- (void)handleAnswerCallWithLocalId:(NSUUID * _Nonnull)localId;
/// User chose to answer call referrred to by call <code>localId</code>. Used by the Callee only.
- (void)handleAnswerCall:(SignalCall * _Nonnull)call;
/// For outgoing call, when the callee has chosen to accept the call.
/// For incoming call, when the local user has chosen to accept the call.
- (void)handleConnectedCall:(SignalCall * _Nonnull)call;
/// Local user chose to decline the call vs. answering it.
/// The call is referred to by call <code>localId</code>, which is included in Notification actions.
/// Incoming call only.
- (void)handleDeclineCallWithLocalId:(NSUUID * _Nonnull)localId;
/// Local user chose to decline the call vs. answering it.
/// Incoming call only.
- (void)handleDeclineCall:(SignalCall * _Nonnull)call;
/// Local user chose to end the call.
/// Can be used for Incoming and Outgoing calls.
- (void)handleLocalHungupCall:(SignalCall * _Nonnull)call;
/// Local user toggled to mute audio.
/// Can be used for Incoming and Outgoing calls.
- (void)setIsMutedWithIsMuted:(BOOL)isMuted;
/// Local user toggled video.
/// Can be used for Incoming and Outgoing calls.
- (void)setHasLocalVideoWithHasLocalVideo:(BOOL)hasLocalVideo;
- (void)handleCallKitStartVideo;
/// The connection has been established. The clients can now communicate.
- (void)peerConnectionClientIceConnected:(PeerConnectionClient * _Nonnull)peerConnectionClient;
/// The connection failed to establish. The clients will not be able to communicate.
- (void)peerConnectionClientIceFailed:(PeerConnectionClient * _Nonnull)peerConnectionClient;
/// During the Signaling process each client generates IceCandidates locally, which contain information about how to
/// reach the local client via the internet. The delegate must shuttle these IceCandates to the other (remote) client
/// out of band, as part of establishing a connection over WebRTC.
- (void)peerConnectionClient:(PeerConnectionClient * _Nonnull)peerConnectionClient addedLocalIceCandidate:(RTCIceCandidate * _Nonnull)iceCandidate;
/// Once the peerconnection is established, we can receive messages via the data channel, and notify the delegate.
- (void)peerConnectionClient:(PeerConnectionClient * _Nonnull)peerConnectionClient received:(OWSWebRTCProtosData * _Nonnull)dataChannelMessage;
- (void)peerConnectionClient:(PeerConnectionClient * _Nonnull)peerConnectionClient didUpdateLocal:(RTCVideoTrack * _Nullable)videoTrack;
- (void)peerConnectionClient:(PeerConnectionClient * _Nonnull)peerConnectionClient didUpdateRemote:(RTCVideoTrack * _Nullable)videoTrack;
- (void)hasLocalVideoDidChangeWithCall:(SignalCall * _Nonnull)call hasLocalVideo:(BOOL)hasLocalVideo;
- (void)muteDidChangeWithCall:(SignalCall * _Nonnull)call isMuted:(BOOL)isMuted;
- (void)speakerphoneDidChangeWithCall:(SignalCall * _Nonnull)call isEnabled:(BOOL)isEnabled;
- (void)removeAllObservers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Strings re-used in multiple places should be added here.
SWIFT_CLASS("_TtC8TestChat11CallStrings")
@interface CallStrings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull callStatusFormat;)
+ (NSString * _Nonnull)callStatusFormat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull confirmAndCallButtonTitle;)
+ (NSString * _Nonnull)confirmAndCallButtonTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull callBackAlertTitle;)
+ (NSString * _Nonnull)callBackAlertTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull callBackAlertMessageFormat;)
+ (NSString * _Nonnull)callBackAlertMessageFormat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull callBackAlertCallButton;)
+ (NSString * _Nonnull)callBackAlertCallButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull callBackButtonTitle;)
+ (NSString * _Nonnull)callBackButtonTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull showThreadButtonTitle;)
+ (NSString * _Nonnull)showThreadButtonTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull missedCallNotificationBodyWithoutCallerName;)
+ (NSString * _Nonnull)missedCallNotificationBodyWithoutCallerName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull missedCallNotificationBodyWithCallerName;)
+ (NSString * _Nonnull)missedCallNotificationBodyWithCallerName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull missedCallWithIdentityChangeNotificationBodyWithoutCallerName;)
+ (NSString * _Nonnull)missedCallWithIdentityChangeNotificationBodyWithoutCallerName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull missedCallWithIdentityChangeNotificationBodyWithCallerName;)
+ (NSString * _Nonnull)missedCallWithIdentityChangeNotificationBodyWithCallerName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Notify the user of call related activities.
/// Driven by either a CallKit or System notifications adaptee
SWIFT_CLASS("_TtC8TestChat13CallUIAdapter")
@interface CallUIAdapter : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
- (nonnull instancetype)initWithCallService:(CallService * _Nonnull)callService contactsManager:(OWSContactsManager * _Nonnull)contactsManager notificationsAdapter:(OWSCallNotificationsAdapter * _Nonnull)notificationsAdapter OBJC_DESIGNATED_INITIALIZER;
- (void)reportIncomingCall:(SignalCall * _Nonnull)call thread:(TSContactThread * _Nonnull)thread;
- (void)reportMissedCall:(SignalCall * _Nonnull)call;
- (SignalCall * _Nonnull)startOutgoingCallWithHandle:(NSString * _Nonnull)handle SWIFT_WARN_UNUSED_RESULT;
- (void)answerCallWithLocalId:(NSUUID * _Nonnull)localId;
- (void)answerCall:(SignalCall * _Nonnull)call;
- (void)declineCallWithLocalId:(NSUUID * _Nonnull)localId;
- (void)declineCall:(SignalCall * _Nonnull)call;
- (void)startAndShowOutgoingCallWithRecipientId:(NSString * _Nonnull)recipientId;
- (void)recipientAcceptedCall:(SignalCall * _Nonnull)call;
- (void)remoteDidHangupCall:(SignalCall * _Nonnull)call;
- (void)remoteBusy:(SignalCall * _Nonnull)call;
- (void)localHangupCall:(SignalCall * _Nonnull)call;
- (void)showCall:(SignalCall * _Nonnull)call;
- (void)setIsMutedWithCall:(SignalCall * _Nonnull)call isMuted:(BOOL)isMuted;
- (void)setHasLocalVideoWithCall:(SignalCall * _Nonnull)call hasLocalVideo:(BOOL)hasLocalVideo;
- (void)setIsSpeakerphoneEnabledWithCall:(SignalCall * _Nonnull)call isEnabled:(BOOL)isEnabled;
@property (nonatomic, readonly) BOOL hasManualRinger;
- (void)didUpdateCallWithCall:(SignalCall * _Nullable)call;
- (void)didUpdateVideoTracksWithCall:(SignalCall * _Nullable)call localVideoTrack:(RTCVideoTrack * _Nullable)localVideoTrack remoteVideoTrack:(RTCVideoTrack * _Nullable)remoteVideoTrack;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIVisualEffectView;
@class NSDateFormatter;
@class NSTimer;
@class RTCEAGLVideoView;
@class RTCCameraPreviewView;
@class NSLayoutConstraint;
@class UIGestureRecognizer;

SWIFT_CLASS_NAMED("CallViewController")
@interface OWSCallViewController : UIViewController <RTCEAGLVideoViewDelegate>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) CallUIAdapter * _Nonnull callUIAdapter;
@property (nonatomic, readonly, strong) OWSContactsManager * _Nonnull contactsManager;
@property (nonatomic, strong) TSContactThread * _Null_unspecified thread;
@property (nonatomic, strong) SignalCall * _Null_unspecified call;
@property (nonatomic) BOOL hasDismissed;
@property (nonatomic) BOOL hasConstraints;
@property (nonatomic, strong) UIVisualEffectView * _Null_unspecified blurView;
@property (nonatomic, strong) NSDateFormatter * _Nullable dateFormatter;
@property (nonatomic, strong) UILabel * _Null_unspecified contactNameLabel;
@property (nonatomic, strong) AvatarImageView * _Null_unspecified contactAvatarView;
@property (nonatomic, strong) UILabel * _Null_unspecified callStatusLabel;
@property (nonatomic, strong) NSTimer * _Nullable callDurationTimer;
@property (nonatomic, strong) UIView * _Null_unspecified ongoingCallView;
@property (nonatomic, strong) UIButton * _Null_unspecified hangUpButton;
@property (nonatomic, strong) UIButton * _Null_unspecified speakerPhoneButton;
@property (nonatomic, strong) UIButton * _Null_unspecified audioModeMuteButton;
@property (nonatomic, strong) UIButton * _Null_unspecified audioModeVideoButton;
@property (nonatomic, strong) UIButton * _Null_unspecified videoModeMuteButton;
@property (nonatomic, strong) UIButton * _Null_unspecified videoModeVideoButton;
@property (nonatomic, strong) UIView * _Null_unspecified incomingCallView;
@property (nonatomic, strong) UIButton * _Null_unspecified acceptIncomingButton;
@property (nonatomic, strong) UIButton * _Null_unspecified declineIncomingButton;
@property (nonatomic, strong) RTCEAGLVideoView * _Null_unspecified remoteVideoView;
@property (nonatomic, strong) RTCCameraPreviewView * _Null_unspecified localVideoView;
@property (nonatomic, weak) RTCVideoTrack * _Nullable localVideoTrack;
@property (nonatomic, weak) RTCVideoTrack * _Nullable remoteVideoTrack;
@property (nonatomic, copy) NSArray<NSLayoutConstraint *> * _Nonnull remoteVideoConstraints;
@property (nonatomic, copy) NSArray<NSLayoutConstraint *> * _Nonnull localVideoConstraints;
@property (nonatomic) BOOL shouldRemoteVideoControlsBeHidden;
@property (nonatomic) BOOL isShowingSettingsNag;
@property (nonatomic, strong) UIView * _Null_unspecified settingsNagView;
@property (nonatomic, strong) UILabel * _Null_unspecified settingsNagDescriptionLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)observeNotifications;
- (void)didBecomeActive;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)createViews;
- (void)didTouchRootViewWithSender:(UIGestureRecognizer * _Nonnull)sender;
- (void)createVideoViews;
- (void)createContactViews;
- (void)createSettingsNagViews;
- (CGFloat)buttonSize SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)buttonInset SWIFT_WARN_UNUSED_RESULT;
- (void)createOngoingCallControls;
- (void)setButtonSelectedImageWithButton:(UIButton * _Nonnull)button imageName:(NSString * _Nonnull)imageName;
- (void)createIncomingCallControls;
- (UIView * _Nonnull)createContainerForCallControlsWithControlGroups:(NSArray<NSArray<UIView *> *> * _Nonnull)controlGroups SWIFT_WARN_UNUSED_RESULT;
- (UIButton * _Nonnull)createButtonWithImageName:(NSString * _Nonnull)imageName action:(SEL _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)rowWithSubviewsWithSubviews:(NSArray<UIView *> * _Nonnull)subviews SWIFT_WARN_UNUSED_RESULT;
- (void)updateViewConstraints;
- (void)updateRemoteVideoLayout;
- (void)updateLocalVideoLayout;
- (void)showCallFailedWithError:(NSError * _Nonnull)error;
- (void)updateCallDurationWithTimer:(NSTimer * _Nullable)timer;
/// Ends a connected call. Do not confuse with <code>didPressDeclineCall</code>.
- (void)didPressHangupWithSender:(UIButton * _Nonnull)sender;
- (void)didPressMuteWithSender:(UIButton * _Nonnull)muteButton;
- (void)didPressSpeakerphoneWithSender:(UIButton * _Nonnull)speakerphoneButton;
- (void)didPressTextMessageWithSender:(UIButton * _Nonnull)speakerphoneButton;
- (void)didPressAnswerCallWithSender:(UIButton * _Nonnull)sender;
- (void)didPressVideoWithSender:(UIButton * _Nonnull)sender;
/// Denies an incoming not-yet-connected call, Do not confuse with <code>didPressHangup</code>.
- (void)didPressDeclineCallWithSender:(UIButton * _Nonnull)sender;
- (void)didPressShowCallSettingsWithSender:(UIButton * _Nonnull)sender;
- (void)didPressDismissNagWithSender:(UIButton * _Nonnull)sender;
- (void)hasLocalVideoDidChangeWithCall:(SignalCall * _Nonnull)call hasLocalVideo:(BOOL)hasLocalVideo;
- (void)muteDidChangeWithCall:(SignalCall * _Nonnull)call isMuted:(BOOL)isMuted;
- (void)speakerphoneDidChangeWithCall:(SignalCall * _Nonnull)call isEnabled:(BOOL)isEnabled;
- (void)updateLocalVideoTrackWithLocalVideoTrack:(RTCVideoTrack * _Nullable)localVideoTrack;
- (void)updateRemoteVideoTrackWithRemoteVideoTrack:(RTCVideoTrack * _Nullable)remoteVideoTrack;
- (void)dismissIfPossibleWithShouldDelay:(BOOL)shouldDelay ignoreNag:(BOOL)ignoreNag completion:(void (^ _Nullable)(void))completion;
- (void)didUpdateCallWithCall:(SignalCall * _Nullable)call;
- (void)didUpdateVideoTracksWithCall:(SignalCall * _Nullable)call localVideoTrack:(RTCVideoTrack * _Nullable)localVideoTrack remoteVideoTrack:(RTCVideoTrack * _Nullable)remoteVideoTrack;
- (void)videoView:(RTCEAGLVideoView * _Nonnull)videoView didChangeVideoSize:(CGSize)size;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol OWSCompareSafetyNumbersActivityDelegate;

SWIFT_CLASS_NAMED("CompareSafetyNumbersActivity")
@interface OWSCompareSafetyNumbersActivity : UIActivity
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, copy) NSString * _Nullable mySafetyNumbers;
@property (nonatomic, readonly, strong) id <OWSCompareSafetyNumbersActivityDelegate> _Nonnull delegate;
- (nonnull instancetype)initWithDelegate:(id <OWSCompareSafetyNumbersActivityDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIActivityCategory activityCategory;)
+ (UIActivityCategory)activityCategory SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) UIActivityType _Nullable activityType;
@property (nonatomic, readonly, copy) NSString * _Nullable activityTitle;
@property (nonatomic, readonly, strong) UIImage * _Nullable activityImage;
- (BOOL)canPerformWithActivityItems:(NSArray * _Nonnull)activityItems SWIFT_WARN_UNUSED_RESULT;
- (void)prepareWithActivityItems:(NSArray * _Nonnull)activityItems;
- (void)performActivity;
- (NSString * _Nullable)numericOnlyWithString:(NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)stringsFromActivityItems:(NSArray * _Nonnull)activityItems SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("CompareSafetyNumbersActivityDelegate")
@protocol OWSCompareSafetyNumbersActivityDelegate
- (void)compareSafetyNumbersActivitySucceededWithActivity:(OWSCompareSafetyNumbersActivity * _Nonnull)activity;
- (void)compareSafetyNumbersActivity:(OWSCompareSafetyNumbersActivity * _Nonnull)activity failedWithError:(NSError * _Nonnull)error;
@end

@class UINib;
@class Contact;

SWIFT_CLASS("_TtC8TestChat11ContactCell")
@interface ContactCell : UITableViewCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UINib * _Nonnull nib;)
+ (UINib * _Nonnull)nib SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified contactTextLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified contactDetailTextLabel;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified contactImageView;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified contactContainerView;
@property (nonatomic, strong) Contact * _Nullable contact;
- (void)awakeFromNib;
- (void)prepareForReuse;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)didChangePreferredContentSize;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class UISearchBar;
@class UILocalizedIndexedCollation;
@class CNContactStore;
@protocol CNKeyDescriptor;

SWIFT_CLASS("_TtC8TestChat14ContactsPicker")
@interface ContactsPicker : UIViewController <UIBarPositioningDelegate, UITableViewDataSource, UISearchBarDelegate, UIScrollViewDelegate, UITableViewDelegate>
@property (nonatomic, strong) IBOutlet UITableView * _Null_unspecified tableView;
@property (nonatomic, strong) IBOutlet UISearchBar * _Null_unspecified searchBar;
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, copy) NSString * _Nonnull contactCellReuseIdentifier;
@property (nonatomic, readonly, strong) OWSContactsManager * _Nonnull contactsManager;
@property (nonatomic, readonly, strong) UILocalizedIndexedCollation * _Nonnull collation;
@property (nonatomic, readonly, strong) CNContactStore * _Nonnull contactStore;
@property (nonatomic, copy) NSArray<NSArray<CNContact *> *> * _Nonnull sections;
@property (nonatomic, copy) NSArray<NSArray<CNContact *> *> * _Nonnull filteredSections;
@property (nonatomic, copy) NSArray<Contact *> * _Nonnull selectedContacts;
@property (nonatomic) BOOL multiSelectEnabled;
@property (nonatomic, readonly, copy) NSArray<id <CNKeyDescriptor>> * _Nonnull allowedContactKeys;
- (void)viewDidLoad;
- (void)didChangePreferredContentSize;
- (void)initializeBarButtons;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)reloadContacts;
- (void)getContactsOnError:(void (^ _Nonnull)(NSError * _Nonnull))errorHandler;
- (NSArray<NSArray<CNContact *> *> * _Nonnull)collatedContacts:(NSArray<CNContact *> * _Nonnull)contacts SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView sectionForSectionIndexTitle:(NSString * _Nonnull)title atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)sectionIndexTitlesForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)onTouchCancelButton;
- (void)onTouchDoneButton;
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
- (void)updateSearchResultsWithSearchText:(NSString * _Nonnull)searchText;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8TestChat21DisplayableTextFilter")
@interface DisplayableTextFilter : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
- (NSString * _Nullable)displayableText:(NSString * _Nullable)text SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class YapDatabaseReadWriteTransaction;

SWIFT_CLASS("_TtC8TestChat17ExperienceUpgrade")
@interface ExperienceUpgrade : TSYapDatabaseObject
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, copy) NSDate * _Nullable seenAt;
- (nonnull instancetype)initWithUniqueId:(NSString * _Nonnull)uniqueId title:(NSString * _Nonnull)title body:(NSString * _Nonnull)body image:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUniqueId:(NSString * _Nonnull)uniqueId OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithCoder:(NSCoder * _Null_unspecified)coder OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithDictionary:(NSDictionary * _Null_unspecified)dictionaryValue error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
+ (MTLPropertyStorage)storageBehaviorForPropertyWithKey:(NSString * _Nonnull)propertyKey SWIFT_WARN_UNUSED_RESULT;
- (void)markAsSeenWithTransaction:(YapDatabaseReadWriteTransaction * _Nonnull)transaction;
@end

@class YapDatabaseReadTransaction;

SWIFT_CLASS("_TtC8TestChat23ExperienceUpgradeFinder")
@interface ExperienceUpgradeFinder : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
- (NSArray<ExperienceUpgrade *> * _Nonnull)allUnseenWithTransaction:(YapDatabaseReadTransaction * _Nonnull)transaction SWIFT_WARN_UNUSED_RESULT;
- (void)markAllAsSeenWithTransaction:(YapDatabaseReadWriteTransaction * _Nonnull)transaction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPageViewController;

SWIFT_CLASS("_TtC8TestChat36ExperienceUpgradesPageViewController")
@interface ExperienceUpgradesPageViewController : UIViewController <UIPageViewControllerDataSource>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) UIPageViewController * _Nonnull pageViewController;
- (nonnull instancetype)initWithExperienceUpgrades:(NSArray<ExperienceUpgrade *> * _Nonnull)experienceUpgrades OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("unavailable, use initWithExperienceUpgrade instead");
- (void)viewDidLoad;
- (void)loadView;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)presentationIndexForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
- (void)addViewControllerWithExperienceUpgrade:(ExperienceUpgrade * _Nonnull)experienceUpgrade;
- (void)didTapDismissButtonWithSender:(UIButton * _Nonnull)sender;
- (void)handleDismissGestureWithSender:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIAlertController;
@class UIAlertAction;
@class MFMessageComposeViewController;
@class MFMailComposeViewController;

SWIFT_CLASS_NAMED("InviteFlow")
@interface OWSInviteFlow : NSObject <MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, copy) NSString * _Nonnull installUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull homepageUrl;
@property (nonatomic, readonly, strong) UIAlertController * _Nonnull actionSheetController;
@property (nonatomic, readonly, strong) UIViewController * _Nonnull presentingViewController;
@property (nonatomic, readonly, strong) OWSContactsManager * _Nonnull contactsManager;
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController contactsManager:(OWSContactsManager * _Nonnull)contactsManager OBJC_DESIGNATED_INITIALIZER;
- (BOOL)canTweet SWIFT_WARN_UNUSED_RESULT;
- (UIAlertAction * _Nullable)tweetAction SWIFT_WARN_UNUSED_RESULT;
- (UIAlertAction * _Nonnull)dismissAction SWIFT_WARN_UNUSED_RESULT;
- (void)contactsPicker:(ContactsPicker * _Nonnull)_ didSelectMultipleContacts:(NSArray<Contact *> * _Nonnull)contacts SWIFT_AVAILABILITY(ios,introduced=9.0);
- (BOOL)contactsPicker:(ContactsPicker * _Nonnull)_ shouldSelectContact:(Contact * _Nonnull)contact SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
- (UIAlertAction * _Nullable)messageAction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
- (void)sendSMSToPhoneNumbers:(NSArray<NSString *> * _Nonnull)phoneNumbers;
- (void)messageComposeViewController:(MFMessageComposeViewController * _Nonnull)controller didFinishWithResult:(MessageComposeResult)result;
- (UIAlertAction * _Nullable)mailAction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
- (void)sendMailToEmails:(NSArray<NSString *> * _Nonnull)recipientEmails SWIFT_AVAILABILITY(ios,introduced=9.0);
- (void)mailComposeController:(MFMailComposeViewController * _Nonnull)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class TSMessagesManager;
@class OWSSignalService;
@class OWSSignalServiceProtosEnvelope;

SWIFT_CLASS_NAMED("MessageFetcherJob")
@interface OWSMessageFetcherJob : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, strong) NSTimer * _Nullable timer;
@property (nonatomic, readonly, strong) TSNetworkManager * _Nonnull networkManager;
@property (nonatomic, readonly, strong) TSMessagesManager * _Nonnull messagesManager;
@property (nonatomic, readonly, strong) OWSSignalService * _Nonnull signalService;
- (nonnull instancetype)initWithMessagesManager:(TSMessagesManager * _Nonnull)messagesManager networkManager:(TSNetworkManager * _Nonnull)networkManager signalService:(OWSSignalService * _Nonnull)signalService OBJC_DESIGNATED_INITIALIZER;
- (void)runAsync;
- (void)startRunLoopWithTimeInterval:(double)timeInterval;
- (void)stopRunLoop;
- (OWSSignalServiceProtosEnvelope * _Nullable)buildEnvelopeWithMessageDict:(NSDictionary<NSString *, id> * _Nonnull)messageDict SWIFT_WARN_UNUSED_RESULT;
- (void)acknowledgeDeliveryWithEnvelope:(OWSSignalServiceProtosEnvelope * _Nonnull)envelope;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface OWSMessageSender (SWIFT_EXTENSION(TestChat))
@end


SWIFT_CLASS("_TtC8TestChat9OWSAlerts")
@interface OWSAlerts : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
/// Cleanup and present alert for no permissions
+ (void)showNoMicrophonePermissionAlert;
+ (void)showAlertWithTitle:(NSString * _Nonnull)title;
+ (void)showAlertWithTitle:(NSString * _Nonnull)title message:(NSString * _Nonnull)message;
+ (void)showAlertWithTitle:(NSString * _Nonnull)title message:(NSString * _Nullable)message buttonTitle:(NSString * _Nullable)buttonTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ContactsUpdater;

/// Creates an outbound call via WebRTC.
SWIFT_CLASS("_TtC8TestChat21OutboundCallInitiator")
@interface OutboundCallInitiator : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) OWSContactsManager * _Nonnull contactsManager;
@property (nonatomic, readonly, strong) ContactsUpdater * _Nonnull contactsUpdater;
- (nonnull instancetype)initWithContactsManager:(OWSContactsManager * _Nonnull)contactsManager contactsUpdater:(ContactsUpdater * _Nonnull)contactsUpdater OBJC_DESIGNATED_INITIALIZER;
/// |handle| is a user formatted phone number, e.g. from a system contacts entry
- (BOOL)initiateCallWithHandle:(NSString * _Nonnull)handle SWIFT_WARN_UNUSED_RESULT;
/// |recipientId| is a e164 formatted phone number.
- (BOOL)initiateCallWithRecipientId:(NSString * _Nonnull)recipientId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class TSMessage;

SWIFT_CLASS("_TtC8TestChat33OversizeTextMessageViewController")
@interface OversizeTextMessageViewController : UIViewController
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) TSMessage * _Nonnull message;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use message: constructor instead.");
- (nonnull instancetype)initWithMessage:(TSMessage * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)shareWasPressedWithSender:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class RTCDataChannel;
@class RTCDataBuffer;
@class RTCPeerConnection;
@class RTCMediaStream;

/// <code>PeerConnectionClient</code> is our interface to WebRTC.
/// It is primarily a wrapper around <code>RTCPeerConnection</code>, which is responsible for sending and receiving our call data
/// including audio, video, and some post-connected signaling (hangup, add video)
SWIFT_CLASS("_TtC8TestChat20PeerConnectionClient")
@interface PeerConnectionClient : NSObject <RTCPeerConnectionDelegate, RTCDataChannelDelegate>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
- (void)setLocalVideoEnabledWithEnabled:(BOOL)enabled;
- (void)setAudioEnabledWithEnabled:(BOOL)enabled;
- (void)addIceCandidate:(RTCIceCandidate * _Nonnull)candidate;
- (void)terminate;
- (void)sendDataChannelMessageWithData:(NSData * _Nonnull)data description:(NSString * _Nonnull)description;
/// The data channel state changed.
- (void)dataChannelDidChangeState:(RTCDataChannel * _Nonnull)dataChannel;
/// The data channel successfully received a data buffer.
- (void)dataChannel:(RTCDataChannel * _Nonnull)dataChannel didReceiveMessageWithBuffer:(RTCDataBuffer * _Nonnull)buffer;
/// The data channel’s |bufferedAmount| changed.
- (void)dataChannel:(RTCDataChannel * _Nonnull)dataChannel didChangeBufferedAmount:(uint64_t)amount;
/// Called when the SignalingState changed.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didChangeSignalingState:(RTCSignalingState)stateChanged;
/// Called when media is received on a new stream from remote peer.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didAddStream:(RTCMediaStream * _Nonnull)stream;
/// Called when a remote peer closes a stream.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didRemoveStream:(RTCMediaStream * _Nonnull)stream;
/// Called when negotiation is needed, for example ICE has restarted.
- (void)peerConnectionShouldNegotiate:(RTCPeerConnection * _Nonnull)peerConnection;
/// Called any time the IceConnectionState changes.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didChangeIceConnectionState:(RTCIceConnectionState)newState;
/// Called any time the IceGatheringState changes.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didChangeIceGatheringState:(RTCIceGatheringState)newState;
/// New ice candidate has been found.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didGenerateIceCandidate:(RTCIceCandidate * _Nonnull)candidate;
/// Called when a group of local Ice candidates have been removed.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didRemoveIceCandidates:(NSArray<RTCIceCandidate *> * _Nonnull)candidates;
/// New data channel has been opened.
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didOpenDataChannel:(RTCDataChannel * _Nonnull)dataChannel;
+ (void)configureAudioSession;
+ (void)startAudioSession;
+ (void)stopAudioSession;
- (RTCPeerConnection * _Nonnull)peerConnectionForTests SWIFT_WARN_UNUSED_RESULT;
- (RTCDataChannel * _Nonnull)dataChannelForTests SWIFT_WARN_UNUSED_RESULT;
- (void)flushSignalingQueueForTests;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class TSStorageManager;
@class TSThread;

SWIFT_CLASS("_TtC8TestChat17ProfileFetcherJob")
@interface ProfileFetcherJob : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) TSNetworkManager * _Nonnull networkManager;
@property (nonatomic, readonly, strong) TSStorageManager * _Nonnull storageManager;
@property (nonatomic, readonly, strong) TSThread * _Nonnull thread;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSDate *> * _Nonnull fetchDateMap;)
+ (NSDictionary<NSString *, NSDate *> * _Nonnull)fetchDateMap SWIFT_WARN_UNUSED_RESULT;
+ (void)setFetchDateMap:(NSDictionary<NSString *, NSDate *> * _Nonnull)value;
+ (void)runWithThread:(TSThread * _Nonnull)thread networkManager:(TSNetworkManager * _Nonnull)networkManager;
- (nonnull instancetype)initWithThread:(TSThread * _Nonnull)thread networkManager:(TSNetworkManager * _Nonnull)networkManager OBJC_DESIGNATED_INITIALIZER;
- (void)run;
- (void)getProfileWithRecipientId:(NSString * _Nonnull)recipientId remainingRetries:(NSInteger)remainingRetries;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8TestChat12ReminderView")
@interface ReminderView : UIView
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) UILabel * _Nonnull label;
@property (nonatomic, readonly, copy) void (^ _Nonnull defaultTapAction)(void);
@property (nonatomic, copy) void (^ _Nonnull tapAction)(void);
@property (nonatomic, copy) NSString * _Nullable text;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text tapAction:(void (^ _Nonnull)(void))tapAction;
- (void)setupSubviews;
- (void)handleTapWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
@end


SWIFT_CLASS("_TtC8TestChat29SafetyNumberConfirmationAlert")
@interface SafetyNumberConfirmationAlert : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
- (nonnull instancetype)initWithContactsManager:(OWSContactsManager * _Nonnull)contactsManager OBJC_DESIGNATED_INITIALIZER;
+ (BOOL)presentAlertIfNecessaryWithRecipientId:(NSString * _Nonnull)recipientId confirmationText:(NSString * _Nonnull)confirmationText contactsManager:(OWSContactsManager * _Nonnull)contactsManager completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)presentAlertIfNecessaryWithRecipientIds:(NSArray<NSString *> * _Nonnull)recipientIds confirmationText:(NSString * _Nonnull)confirmationText contactsManager:(OWSContactsManager * _Nonnull)contactsManager completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
/// Shows confirmation dialog if at least one of the recipient id’s is not confirmed.
/// @returns true  if an alert was shown
/// false if there were no unconfirmed identities
- (BOOL)presentIfNecessaryWithRecipientIds:(NSArray<NSString *> * _Nonnull)recipientIds confirmationText:(NSString * _Nonnull)confirmationText completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
- (void)presentSafetyNumberViewControllerWithTheirIdentityKey:(NSData * _Nonnull)theirIdentityKey theirRecipientId:(NSString * _Nonnull)theirRecipientId theirDisplayName:(NSString * _Nonnull)theirDisplayName completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8TestChat19SafetyNumberStrings")
@interface SafetyNumberStrings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull confirmSendButton;)
+ (NSString * _Nonnull)confirmSendButton SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("SessionResetJob")
@interface OWSSessionResetJob : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, copy) NSString * _Nonnull recipientId;
@property (nonatomic, readonly, strong) TSThread * _Nonnull thread;
@property (nonatomic, readonly, strong) TSStorageManager * _Nonnull storageManager;
@property (nonatomic, readonly, strong) OWSMessageSender * _Nonnull messageSender;
- (nonnull instancetype)initWithRecipientId:(NSString * _Nonnull)recipientId thread:(TSThread * _Nonnull)thread messageSender:(OWSMessageSender * _Nonnull)messageSender storageManager:(TSStorageManager * _Nonnull)storageManager OBJC_DESIGNATED_INITIALIZER;
- (void)run;
+ (void)runWithContactThread:(TSContactThread * _Nonnull)contactThread messageSender:(OWSMessageSender * _Nonnull)messageSender storageManager:(TSStorageManager * _Nonnull)storageManager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8TestChat16SignalAttachment")
@interface SignalAttachment : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TAG;)
+ (NSString * _Nonnull)TAG SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSURL * _Nullable temporaryDataUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull dataUTI;
@property (nonatomic, readonly, copy) NSString * _Nullable filename;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kOversizeTextAttachmentUTI;)
+ (NSString * _Nonnull)kOversizeTextAttachmentUTI SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUnknownTestAttachmentUTI;)
+ (NSString * _Nonnull)kUnknownTestAttachmentUTI SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, readonly) BOOL isVoiceMessage;
/// Media Size constraints from Signal-Android
/// https://github.com/WhisperSystems/Signal-Android/blob/master/src/org/thoughtcrime/securesms/mms/PushMediaConstraints.java
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kMaxFileSizeAnimatedImage;)
+ (NSInteger)kMaxFileSizeAnimatedImage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kMaxFileSizeImage;)
+ (NSInteger)kMaxFileSizeImage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kMaxFileSizeVideo;)
+ (NSInteger)kMaxFileSizeVideo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kMaxFileSizeAudio;)
+ (NSInteger)kMaxFileSizeAudio SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kMaxFileSizeGeneric;)
+ (NSInteger)kMaxFileSizeGeneric SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data dataUTI:(NSString * _Nonnull)dataUTI filename:(NSString * _Nullable)filename OBJC_DESIGNATED_INITIALIZER;
- (NSURL * _Nullable)getTemporaryDataUrl SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL hasError;
@property (nonatomic, readonly, copy) NSString * _Nullable errorName;
@property (nonatomic, readonly, copy) NSString * _Nullable localizedErrorDescription;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull missingDataErrorMessage;)
+ (NSString * _Nonnull)missingDataErrorMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
@property (nonatomic, readonly, copy) NSString * _Nonnull filenameOrDefault;
@property (nonatomic, readonly, copy) NSString * _Nullable fileExtension;
@property (nonatomic, readonly) BOOL isImage;
@property (nonatomic, readonly) BOOL isAnimatedImage;
@property (nonatomic, readonly) BOOL isVideo;
@property (nonatomic, readonly) BOOL isAudio;
+ (BOOL)pasteboardHasPossibleAttachment SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)pasteboardHasText SWIFT_WARN_UNUSED_RESULT;
+ (SignalAttachment * _Nullable)attachmentFromPasteboard SWIFT_WARN_UNUSED_RESULT;
+ (SignalAttachment * _Nonnull)imageAttachmentWithImage:(UIImage * _Nullable)image dataUTI:(NSString * _Nonnull)dataUTI filename:(NSString * _Nullable)filename SWIFT_WARN_UNUSED_RESULT;
+ (SignalAttachment * _Nonnull)voiceMessageAttachmentWithData:(NSData * _Nullable)data dataUTI:(NSString * _Nonnull)dataUTI filename:(NSString * _Nullable)filename SWIFT_WARN_UNUSED_RESULT;
+ (SignalAttachment * _Nonnull)attachmentWithData:(NSData * _Nullable)data dataUTI:(NSString * _Nonnull)dataUTI filename:(NSString * _Nullable)filename SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class TSCall;
@class NSDate;

/// Data model for a WebRTC backed voice/video call.
/// This class’ state should only be accessed on the main queue.
SWIFT_CLASS("_TtC8TestChat10SignalCall")
@interface SignalCall : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, copy) NSString * _Nonnull remotePhoneNumber;
@property (nonatomic, readonly) uint64_t signalingId;
@property (nonatomic, readonly, copy) NSUUID * _Nonnull localId;
@property (nonatomic, strong) TSCall * _Nullable callRecord;
@property (nonatomic) BOOL hasLocalVideo;
@property (nonatomic) BOOL isMuted;
@property (nonatomic) BOOL isSpeakerphoneEnabled;
@property (nonatomic) BOOL isOnHold;
@property (nonatomic, strong) NSDate * _Nullable connectedDate;
+ (SignalCall * _Nonnull)outgoingCallWithLocalId:(NSUUID * _Nonnull)localId remotePhoneNumber:(NSString * _Nonnull)remotePhoneNumber SWIFT_WARN_UNUSED_RESULT;
+ (SignalCall * _Nonnull)incomingCallWithLocalId:(NSUUID * _Nonnull)localId remotePhoneNumber:(NSString * _Nonnull)remotePhoneNumber signalingId:(uint64_t)signalingId SWIFT_WARN_UNUSED_RESULT;
- (void)removeAllObservers;
+ (uint64_t)newCallSignalingId SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)connectionDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class PushManager;
@class PropertyListPreferences;

SWIFT_CLASS_NAMED("SyncPushTokensJob")
@interface OWSSyncPushTokensJob : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) PushManager * _Nonnull pushManager;
@property (nonatomic, readonly, strong) AccountManager * _Nonnull accountManager;
@property (nonatomic, readonly, strong) PropertyListPreferences * _Nonnull preferences;
@property (nonatomic, readonly) BOOL showAlerts;
@property (nonatomic) BOOL uploadOnlyIfStale;
- (nonnull instancetype)initWithPushManager:(PushManager * _Nonnull)pushManager accountManager:(AccountManager * _Nonnull)accountManager preferences:(PropertyListPreferences * _Nonnull)preferences showAlerts:(BOOL)showAlerts OBJC_DESIGNATED_INITIALIZER;
+ (void)runWithPushManager:(PushManager * _Nonnull)pushManager accountManager:(AccountManager * _Nonnull)accountManager preferences:(PropertyListPreferences * _Nonnull)preferences showAlerts:(BOOL)showAlerts;
- (void)run;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol SystemContactsFetcherDelegate;

SWIFT_CLASS("_TtC8TestChat21SystemContactsFetcher")
@interface SystemContactsFetcher : NSObject
@property (nonatomic, copy) NSDate * _Nullable lastDelegateNotificationDate;
@property (nonatomic, weak) id <SystemContactsFetcherDelegate> _Nullable delegate;
@property (nonatomic, readonly) BOOL isAuthorized;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL supportsContactEditing;
/// Ensures we’ve requested access for system contacts. This can be used in multiple places,
/// where we might need contact access, but will ensure we don’t wastefully reload contacts
/// if we have already fetched contacts.
/// @param   completion  completion handler is called on main thread.
- (void)requestOnceWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)fetchIfAlreadyAuthorized;
@end


SWIFT_PROTOCOL("_TtP8TestChat29SystemContactsFetcherDelegate_")
@protocol SystemContactsFetcherDelegate
- (void)systemContactsFetcher:(SystemContactsFetcher * _Nonnull)systemContactsFetcher updatedContacts:(NSArray<Contact *> * _Nonnull)contacts;
@end


@interface UIApplication (SWIFT_EXTENSION(TestChat))
@property (nonatomic, readonly, strong) UIViewController * _Nullable frontmostViewController;
- (void)openSystemSettings;
@end


@interface UIDevice (SWIFT_EXTENSION(TestChat))
@property (nonatomic, readonly) BOOL supportsCallKit;
@end


@interface UIStoryboard (SWIFT_EXTENSION(TestChat))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIStoryboard * _Nonnull main;)
+ (UIStoryboard * _Nonnull)main SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8TestChat24UserNotificationsAdaptee")
@interface UserNotificationsAdaptee : NSObject <OWSCallNotificationsAdaptee, UNUserNotificationCenterDelegate>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly) NotificationType previewType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)requestAuthorization;
- (void)presentIncomingCall:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
- (void)presentMissedCall:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
- (void)presentMissedCallBecauseOfNoLongerVerifiedIdentity:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
- (void)presentMissedCallBecauseOfNewIdentity:(SignalCall * _Nonnull)call callerName:(NSString * _Nonnull)callerName;
@end


SWIFT_CLASS("_TtC8TestChat14ViewController")
@interface ViewController : UIViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class OWSSignalServiceProtosCallMessageOffer;
@class OWSSignalServiceProtosCallMessageAnswer;
@class OWSSignalServiceProtosCallMessageIceUpdate;
@class OWSSignalServiceProtosCallMessageHangup;
@class OWSSignalServiceProtosCallMessageBusy;

SWIFT_CLASS_NAMED("WebRTCCallMessageHandler")
@interface OWSWebRTCCallMessageHandler : NSObject <OWSCallMessageHandler>
@property (nonatomic, readonly, copy) NSString * _Nonnull TAG;
@property (nonatomic, readonly, strong) AccountManager * _Nonnull accountManager;
@property (nonatomic, readonly, strong) CallService * _Nonnull callService;
@property (nonatomic, readonly, strong) OWSMessageSender * _Nonnull messageSender;
- (nonnull instancetype)initWithAccountManager:(AccountManager * _Nonnull)accountManager callService:(CallService * _Nonnull)callService messageSender:(OWSMessageSender * _Nonnull)messageSender OBJC_DESIGNATED_INITIALIZER;
- (void)receivedOffer:(OWSSignalServiceProtosCallMessageOffer * _Nonnull)offer fromCallerId:(NSString * _Nonnull)callerId;
- (void)receivedAnswer:(OWSSignalServiceProtosCallMessageAnswer * _Nonnull)answer fromCallerId:(NSString * _Nonnull)callerId;
- (void)receivedIceUpdate:(OWSSignalServiceProtosCallMessageIceUpdate * _Nonnull)iceUpdate fromCallerId:(NSString * _Nonnull)callerId;
- (void)receivedHangup:(OWSSignalServiceProtosCallMessageHangup * _Nonnull)hangup fromCallerId:(NSString * _Nonnull)callerId;
- (void)receivedBusy:(OWSSignalServiceProtosCallMessageBusy * _Nonnull)busy fromCallerId:(NSString * _Nonnull)callerId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
